{"version":3,"sources":["logo.svg","Components/users.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Users","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentImage","UserList","user","String","optionSelected","albums","photos","urls","handleChange","bind","assertThisInitialized","_this2","fetch","then","response","json","data","setState","event","target","value","albumsID","map","x","userId","push","id","indexOf","albumId","console","log","url","react_default","a","createElement","class","onChange","name","src","Component","App","className","users","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gMC+GzBC,cAvGb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,aAAc,EACdC,SAAU,GACVC,KAAMC,OACNC,gBAAgB,EAChBC,OAAQ,GACRC,OAAQ,GACRC,KAAM,IAGRf,EAAKgB,aAAehB,EAAKgB,aAAaC,KAAlBhB,OAAAiB,EAAA,EAAAjB,CAAAD,IAZRA,mFAiBM,IAAAmB,EAAAhB,KAIlBiB,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKM,SAAS,CAAEhB,SAAUe,MAC1CJ,MAAM,+CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKM,SAAS,CAAEZ,OAAQW,MACxCJ,MAAM,+CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKM,SAAS,CAAEX,OAAQU,2CAO7BE,GAEXvB,KAAKsB,SAAS,CACZf,KAAMgB,EAAMC,OAAOC,MACnBhB,gBAAgB,IAElB,IAAIG,EAAO,GACPc,EAAW,GAGhB1B,KAAKI,MAAMM,OAAOiB,IAAI,SAAAC,GACjBA,EAAEC,QAAUN,EAAMC,OAAOC,OAE3BC,EAASI,KAAKF,EAAEG,MAKnB/B,KAAKI,MAAMO,OAAOgB,IAAI,SAAAC,IAEe,GAAhCF,EAASM,QAAQJ,EAAEK,WACrBC,QAAQC,IAAIP,EAAEQ,KACdxB,EAAKkB,KAAKF,EAAEQ,QAKfpC,KAAKsB,SAAS,CACbV,KAAKA,qCAOL,OAEEyB,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cACXH,EAAAC,EAAAC,cAAA,UAAQR,GAAG,OAAOU,SAAUzC,KAAKa,aAAc2B,MAAM,cACjDH,EAAAC,EAAAC,cAAA,UAAQd,MAAM,KAAd,mBACDzB,KAAKI,MAAME,SAASqB,IAAI,SAAAC,GAAC,OACxBS,EAAAC,EAAAC,cAAA,UAAQd,MAAOG,EAAEG,IAAKH,EAAEc,SAM1BL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2BAAmBvC,KAAKI,MAAMG,KAA9B,KACA8B,EAAAC,EAAAC,cAAA,WAEQvC,KAAKI,MAAMQ,KAAKe,IAAI,SAAAC,GAAC,OAEjBS,EAAAC,EAAAC,cAAA,OAAKI,IAAKf,gBA1FVgB,aCOLC,MAVf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,8DACAF,EAAAC,EAAAC,cAACQ,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.e780992f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\n/**\r\n* @author: Mukesh P\r\n* @class Users\r\n**/\r\n\r\nclass Users extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentImage: 0,\r\n      UserList: [],\r\n      user: String,\r\n      optionSelected: false,\r\n      albums: [],\r\n      photos: [],\r\n      urls: []\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n   \r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    /* fetching the data from all the urls */\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ UserList: data }))\r\n    fetch('https://jsonplaceholder.typicode.com/albums')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ albums: data }))\r\n    fetch('https://jsonplaceholder.typicode.com/photos')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ photos: data }))\r\n\r\n\r\n\r\n  }\r\n\r\n  \r\n  handleChange(event) {\r\n    let found=Number;\r\n    this.setState({\r\n      user: event.target.value,\r\n      optionSelected: true\r\n    })\r\n    let urls = [];\r\n    let albumsID = [];\r\n\r\n    /* Get the album id's for Selected USER*/\r\n   this.state.albums.map(x =>{\r\n    if (x.userId == event.target.value) {\r\n      \r\n      albumsID.push(x.id)\r\n    }\r\n\r\n   })\r\n  /* Get the urls of of Selected USER*/\r\n   this.state.photos.map(x=>{\r\n\r\n    if (albumsID.indexOf(x.albumId) != -1) {\r\n      console.log(x.url)\r\n      urls.push(x.url)\r\n    }\r\n   }\r\n   )\r\n  /*Updating the urls globally*/\r\n   this.setState({\r\n    urls:urls\r\n  })\r\n\r\n  }\r\n  \r\n  render() {\r\n\r\n    return (\r\n      \r\n      <div class=\"App-header\">\r\n      <select id=\"user\" onChange={this.handleChange} class=\"select-css\">\r\n          <option value=\"0\"> Select a User </option>\r\n        {this.state.UserList.map(x =>\r\n          <option value={x.id}>{x.name}</option>\r\n\r\n        )}\r\n       \r\n        </select>\r\n      \r\n        <div>\r\n        <p>Photos of User {this.state.user} </p>\r\n        <div>\r\n         {\r\n                this.state.urls.map(x =>\r\n                \r\n                    <img src={x}></img>\r\n                \r\n                )\r\n         }\r\n         </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Users","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Users from './Components/users';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Select A User From Below Dropdown to veiw photos</h1>\n      <Users></Users>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}